/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ToDoItem as PrismaToDoItem } from "@prisma/client";

export class ToDoItemServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ToDoItemCountArgs, "select">): Promise<number> {
    return this.prisma.toDoItem.count(args);
  }

  async toDoItems<T extends Prisma.ToDoItemFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ToDoItemFindManyArgs>
  ): Promise<PrismaToDoItem[]> {
    return this.prisma.toDoItem.findMany<Prisma.ToDoItemFindManyArgs>(args);
  }
  async toDoItem<T extends Prisma.ToDoItemFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ToDoItemFindUniqueArgs>
  ): Promise<PrismaToDoItem | null> {
    return this.prisma.toDoItem.findUnique(args);
  }
  async createToDoItem<T extends Prisma.ToDoItemCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ToDoItemCreateArgs>
  ): Promise<PrismaToDoItem> {
    return this.prisma.toDoItem.create<T>(args);
  }
  async updateToDoItem<T extends Prisma.ToDoItemUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ToDoItemUpdateArgs>
  ): Promise<PrismaToDoItem> {
    return this.prisma.toDoItem.update<T>(args);
  }
  async deleteToDoItem<T extends Prisma.ToDoItemDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ToDoItemDeleteArgs>
  ): Promise<PrismaToDoItem> {
    return this.prisma.toDoItem.delete(args);
  }
}
