/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, DiaryEntry as PrismaDiaryEntry } from "@prisma/client";

export class DiaryEntryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DiaryEntryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.diaryEntry.count(args);
  }

  async diaryEntries<T extends Prisma.DiaryEntryFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.DiaryEntryFindManyArgs>
  ): Promise<PrismaDiaryEntry[]> {
    return this.prisma.diaryEntry.findMany<Prisma.DiaryEntryFindManyArgs>(args);
  }
  async diaryEntry<T extends Prisma.DiaryEntryFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.DiaryEntryFindUniqueArgs>
  ): Promise<PrismaDiaryEntry | null> {
    return this.prisma.diaryEntry.findUnique(args);
  }
  async createDiaryEntry<T extends Prisma.DiaryEntryCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DiaryEntryCreateArgs>
  ): Promise<PrismaDiaryEntry> {
    return this.prisma.diaryEntry.create<T>(args);
  }
  async updateDiaryEntry<T extends Prisma.DiaryEntryUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DiaryEntryUpdateArgs>
  ): Promise<PrismaDiaryEntry> {
    return this.prisma.diaryEntry.update<T>(args);
  }
  async deleteDiaryEntry<T extends Prisma.DiaryEntryDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.DiaryEntryDeleteArgs>
  ): Promise<PrismaDiaryEntry> {
    return this.prisma.diaryEntry.delete(args);
  }
}
