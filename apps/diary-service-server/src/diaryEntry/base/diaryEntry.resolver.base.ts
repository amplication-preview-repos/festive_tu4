/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DiaryEntry } from "./DiaryEntry";
import { DiaryEntryCountArgs } from "./DiaryEntryCountArgs";
import { DiaryEntryFindManyArgs } from "./DiaryEntryFindManyArgs";
import { DiaryEntryFindUniqueArgs } from "./DiaryEntryFindUniqueArgs";
import { CreateDiaryEntryArgs } from "./CreateDiaryEntryArgs";
import { UpdateDiaryEntryArgs } from "./UpdateDiaryEntryArgs";
import { DeleteDiaryEntryArgs } from "./DeleteDiaryEntryArgs";
import { DiaryEntryService } from "../diaryEntry.service";
@graphql.Resolver(() => DiaryEntry)
export class DiaryEntryResolverBase {
  constructor(protected readonly service: DiaryEntryService) {}

  async _diaryEntriesMeta(
    @graphql.Args() args: DiaryEntryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DiaryEntry])
  async diaryEntries(
    @graphql.Args() args: DiaryEntryFindManyArgs
  ): Promise<DiaryEntry[]> {
    return this.service.diaryEntries(args);
  }

  @graphql.Query(() => DiaryEntry, { nullable: true })
  async diaryEntry(
    @graphql.Args() args: DiaryEntryFindUniqueArgs
  ): Promise<DiaryEntry | null> {
    const result = await this.service.diaryEntry(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DiaryEntry)
  async createDiaryEntry(
    @graphql.Args() args: CreateDiaryEntryArgs
  ): Promise<DiaryEntry> {
    return await this.service.createDiaryEntry({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => DiaryEntry)
  async updateDiaryEntry(
    @graphql.Args() args: UpdateDiaryEntryArgs
  ): Promise<DiaryEntry | null> {
    try {
      return await this.service.updateDiaryEntry({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DiaryEntry)
  async deleteDiaryEntry(
    @graphql.Args() args: DeleteDiaryEntryArgs
  ): Promise<DiaryEntry | null> {
    try {
      return await this.service.deleteDiaryEntry(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
