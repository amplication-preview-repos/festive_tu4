/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DiaryEntryService } from "../diaryEntry.service";
import { DiaryEntryCreateInput } from "./DiaryEntryCreateInput";
import { DiaryEntry } from "./DiaryEntry";
import { DiaryEntryFindManyArgs } from "./DiaryEntryFindManyArgs";
import { DiaryEntryWhereUniqueInput } from "./DiaryEntryWhereUniqueInput";
import { DiaryEntryUpdateInput } from "./DiaryEntryUpdateInput";

export class DiaryEntryControllerBase {
  constructor(protected readonly service: DiaryEntryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DiaryEntry })
  async createDiaryEntry(
    @common.Body() data: DiaryEntryCreateInput
  ): Promise<DiaryEntry> {
    return await this.service.createDiaryEntry({
      data: data,
      select: {
        content: true,
        createdAt: true,
        date: true,
        id: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DiaryEntry] })
  @ApiNestedQuery(DiaryEntryFindManyArgs)
  async diaryEntries(@common.Req() request: Request): Promise<DiaryEntry[]> {
    const args = plainToClass(DiaryEntryFindManyArgs, request.query);
    return this.service.diaryEntries({
      ...args,
      select: {
        content: true,
        createdAt: true,
        date: true,
        id: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DiaryEntry })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async diaryEntry(
    @common.Param() params: DiaryEntryWhereUniqueInput
  ): Promise<DiaryEntry | null> {
    const result = await this.service.diaryEntry({
      where: params,
      select: {
        content: true,
        createdAt: true,
        date: true,
        id: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DiaryEntry })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDiaryEntry(
    @common.Param() params: DiaryEntryWhereUniqueInput,
    @common.Body() data: DiaryEntryUpdateInput
  ): Promise<DiaryEntry | null> {
    try {
      return await this.service.updateDiaryEntry({
        where: params,
        data: data,
        select: {
          content: true,
          createdAt: true,
          date: true,
          id: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DiaryEntry })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDiaryEntry(
    @common.Param() params: DiaryEntryWhereUniqueInput
  ): Promise<DiaryEntry | null> {
    try {
      return await this.service.deleteDiaryEntry({
        where: params,
        select: {
          content: true,
          createdAt: true,
          date: true,
          id: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
